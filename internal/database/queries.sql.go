// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name,password, roles) VALUES ($1, $2, $3) RETURNING id, name, password, roles, created_at, update_at
`

type CreateUserParams struct {
	Name     string  `json:"name"`
	Password string  `json:"password"`
	Roles    []Roles `json:"roles"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Password, arg.Roles)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Roles,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByName = `-- name: GetUserByName :one

SELECT id, name, password, roles FROM users WHERE name = $1 LIMIT 1
`

type GetUserByNameRow struct {
	ID       pgtype.UUID `json:"id"`
	Name     string      `json:"name"`
	Password string      `json:"password"`
	Roles    []Roles     `json:"roles"`
}

// like INSERT INTO users (name, password, roles) VALUES ('nameasf', 'sfaasffas', ARRAY['DBA']::roles[]) RETURNING *;
func (q *Queries) GetUserByName(ctx context.Context, name string) (GetUserByNameRow, error) {
	row := q.db.QueryRow(ctx, getUserByName, name)
	var i GetUserByNameRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Roles,
	)
	return i, err
}

const updateRole = `-- name: UpdateRole :one
UPDATE users set roles =  (select array_agg(distinct e) from unnest(array_append(users.roles, $2::roles)) e) WHERE id = $1 RETURNING id, name, password, roles, created_at, update_at
`

type UpdateRoleParams struct {
	ID      pgtype.UUID `json:"id"`
	Column2 Roles       `json:"column_2"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (User, error) {
	row := q.db.QueryRow(ctx, updateRole, arg.ID, arg.Column2)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Roles,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET
  name = COALESCE(NULLIF($2::varchar, ''), name),
  password = COALESCE(NULLIF($3::varchar, ''), password),
  roles = COALESCE(NULLIF($4::roles[], ARRAY[]::roles[]), roles),
  update_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateUserParams struct {
	ID      pgtype.UUID `json:"id"`
	Column2 string      `json:"column_2"`
	Column3 string      `json:"column_3"`
	Column4 []Roles     `json:"column_4"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	return err
}
